---
apiVersion: apps/v1
kind: Deployment

metadata:
  namespace: {{ .Release.Namespace }}
  name: {{ .Values.name }}
  labels:
    {{- include "labels.common" . | nindent 4 }}
spec:
  # We want only one ElasticSearch node here.
  # Simplicity over resilience in this case.
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: {{ .Values.name }}
  template:
    metadata:
      name: {{ .Values.name }}
      labels:
        app: {{ .Values.name }}
    spec:
      securityContext:
        runAsUser: 1000
        seccompProfile:
          type: RuntimeDefault

      containers:
        - name: elasticsearch
          image: {{ .Values.image.name }}:{{ .Values.image.tag }}
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop:
                - ALL

          env:
            - name: cluster.name
              value: sitesearch
            - name: node.name
              value: sitesearch1
            - name: discovery.type
              value: single-node
            - name: bootstrap.memory_lock
              value: "true"
            - name: ES_JAVA_OPTS
              value: "-Xms256m -Xmx256m"
            - name: ES_HOME
              value: /usr/share/elasticsearch
            - name: MAX_LOCKED_MEMORY
              value: unlimited
            - name: LimitMEMLOCK
              value: infinity
          ports:
            - containerPort: 9200
              name: http
          resources:
            requests:
              cpu: 500m
              memory: 800M
            limits:
              cpu: 500m
              memory: 800M
          volumeMounts:
            - name: data-volume
              mountPath: /usr/share/elasticsearch/data
            - name: logs-volume
              mountPath: /usr/share/elasticsearch/logs
          livenessProbe:
            httpGet:
              path: /
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 3
          readinessProbe:
            httpGet:
              path: /
              port: http
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 30
            timeoutSeconds: 3
      volumes:
        - name: data-volume
          persistentVolumeClaim:
            claimName: {{ .Release.Namespace }}-{{ .Values.name }}
        - name: logs-volume
          emptyDir: {}
      imagePullSecrets:
        - name: {{ .Values.image.name }}-pull-secret
      serviceAccount: {{ .Values.name }}
      serviceAccountName: {{ .Values.name }}
